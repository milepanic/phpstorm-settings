<templateSet group="SublimeSnippets">
  <template name="__con" value="public function __construct($VAR1$) &#10;{&#10;    $VAR2$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="prof" value="protected function $VAR1$($VAR2$)&#10;{&#10;    $END$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="fillable" value="protected $fillable = [$VAR1$];" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="testf" value="/**&#10; * @test&#10; * @covers $VAR1$::$VAR2$&#10; */&#10;public function $VAR3$(): void&#10;{&#10;    $VAR4$&#10;}" description="test function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Class&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;the_one_where&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="bt" value="public function $VAR1$()&#10;{&#10;    return $this-&gt;belongsTo($VAR2$);&#10;}" description="belongsTo" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="rmet" value="Route::$VAR1$('$VAR2$', '$VAR3$@$VAR4$');" description="Route::method()" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;get&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasMany" value="public function $VAR1$()&#10;{&#10;    return $this-&gt;hasMany($VAR2$);&#10;}" description="hasMany relationship" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="getter" value="$this-&gt;$VAR1$ = $$VAR1$;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;property&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="prif" value="private function $VAR1$($VAR2$)&#10;{&#10;    $END$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="accessor" value="public function get$VAR1$Attribute() &#10;{&#10;    return $VAR2$;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Value&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="guarded" value="protected $guarded = [$VAR1$];" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="pubf" value="public function $VAR1$($VAR2$)&#10;{&#10;    $END$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="factory" value="$factory-&gt;define(App\$VAR1$::class, function (Faker\Generator $faker) {&#10;    return [&#10;        $VAR2$&#10;    ]; &#10;});" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Model&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="class" value="namespace $VAR1$$VAR2$;&#10;&#10;class $VAR3$&#10;{&#10;    $VAR4$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;App\\&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;ClassName&quot;" alwaysStopAt="true" />
    <variable name="VAR4" expression="" defaultValue="&quot;public function __construct()&#10;    \{&#10;&#10;    \}&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="scope" value="public function scope$VAR1$($VAR2$)&#10;{&#10;    $VAR3$&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;\$query&quot;" alwaysStopAt="true" />
    <variable name="VAR3" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasOne" value="public function $VAR1$()&#10;{&#10;    return $this-&gt;hasOne($VAR2$);&#10;}" description="hasOne relationship" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="belongsToMany" value="public function $VAR1$()&#10;    {&#10;        return $this-&gt;belongsToMany($VAR2$);&#10;    }" description="belongsToMany relationship" toReformat="true" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>